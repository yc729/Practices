clearVersion control
	- compares line by line
	- Easy to spot differences


one commit per logical change. 


List of git commands:
- git log / git log --stat 		(log of the commits)
	*git log --graph --oneline
	*git log -n [num]	(shows x numb numbers of commits)
- git show[Commit ID]	(shows different between commit and its parrent commit)
- git diff [first id] [second id] 					(compares diff of different versions by their id's)
	*no arguments, compares files in working area to staging area
	*git diff --staged, compares staging area to most recent commit
- git checkout [branch name] 
- git status
- git merge [branch] [branch]	(must be in the branch you want to merge into)
- git branch					( with no arguments shows current branch)
	* git branch [new branch name] (creates a new branch)
- git add [file name] 			(add file to staging area)
- git reset [file name] 		(removw file from staging area) 
	* git reset --hard 			(discard any changes in the working/staging area)
- git commit -m "Commit message"(Commit with comment)
			COMMENT MESSAGE STYLE
				http://udacity.github.io/git-styleguide/
git gc	(grabage collection)
Creating repositories
- git init 						(make a folder repository)
- git clone [URL] 				(create clone of the repository)

Configurationsa
- git config --global color.ui auto (color the differences of commits)


List of git errors:
Should not be doing an octopus 
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state 
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

